(function() {var implementors = {};
implementors["block"] = [{"text":"impl&lt;A, R&gt; RefUnwindSafe for Block&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R&gt; RefUnwindSafe for RcBlock&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R, F&gt; RefUnwindSafe for ConcreteBlock&lt;A, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cocoa"] = [{"text":"impl RefUnwindSafe for NSApplicationPresentationOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSWindowStyleMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSWindowOrderingMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSAlignmentOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSWindowCollectionBehavior","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSWindowOcclusionState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventSwipeTrackingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventPhase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSTouchPhase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventModifierFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSApplicationActivationPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSApplicationActivationOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSApplicationTerminateReply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSWindowTitleVisibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSBackingStoreType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSOpenGLPixelFormatAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSOpenGLPFAOpenGLProfiles","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSOpenGLContextParameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSWindowButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSBezelStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSRequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSPasteboardReadingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSPasteboardWritingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventGestureAxis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSPointingDeviceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventButtonMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEventSubtype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSCompositingOperation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSImageCacheMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSTIFFCompression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSImageLoadStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSTabViewType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSTabState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSEnumerationOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSFastIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSDataReadingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSDataBase64EncodingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSDataBase64DecodingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSDataWritingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSDataSearchOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSRectEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSComparisonResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CALayer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdgeAntialiasingMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CornerMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AutoresizingMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CARenderer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CATransform3D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentsGravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filter","synthetic":true,"types":[]}];
implementors["core_foundation"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CFArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CFArrayIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFAttributedString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFMutableAttributedString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ItemRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ItemMutRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFBoolean","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFDate","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for CFDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for CFMutableDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFNumber","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CFSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFURL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFPropertyList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFTimeZone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFUUID","synthetic":true,"types":[]}];
implementors["core_foundation_sys"] = [{"text":"impl RefUnwindSafe for CFArrayCallBacks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFAttributedString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFAllocatorContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFComparisonResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFDictionaryKeyCallBacks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFDictionaryValueCallBacks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFDictionary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFFileDescriptorContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFMessagePortContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFMessagePort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFBoolean","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFNumber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFRunLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoopSourceContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoopSourceContext1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoopObserverContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFRunLoopTimerContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFSetCallBacks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFTimeZone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFURL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __CFUUID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFUUIDBytes","synthetic":true,"types":[]}];
implementors["core_graphics"] = [{"text":"impl RefUnwindSafe for CGColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGColorSpace","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGColorSpaceRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGBlendMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGTextDrawingMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGDataProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGDataProviderRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGDisplay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGDisplayMode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGDisplayModeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGConfigureOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGEventFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScrollEventUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGEventRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGEventType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGMouseButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGEventTapLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGEventSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGEventSourceRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGEventSourceStateID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGFont","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGFontRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGAffineTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGSRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGSSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGImage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGImageRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGImageAlphaInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGImageByteOrderInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGPath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CGPathRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CGPathElementRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGPathElement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGPathElementType","synthetic":true,"types":[]}];
implementors["darwin_webkit"] = [{"text":"impl RefUnwindSafe for NSURLBookmarkCreationOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NSURLBookmarkResolutionOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DarwinWKApp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DarwinWKWebView","synthetic":true,"types":[]}];
implementors["dispatch"] = [{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Queue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SuspendGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SemaphoreGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueuePriority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dispatch_object_s","synthetic":true,"types":[]}];
implementors["malloc_buf"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for MallocBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["objc"] = [{"text":"impl RefUnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ivar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtocolDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrongPtr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WeakPtr","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()